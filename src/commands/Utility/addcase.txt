const { ChatInputCommandInteraction, EmbedBuilder } = require("discord.js");
const DiscordBot = require("../../client/DiscordBot");
const ApplicationCommand = require('../../structure/ApplicationCommand');
const config = require("../../config");

module.exports = new ApplicationCommand({
    __type__: 1, // Application Command
    command: {
        name: 'add-case',
        description: 'Voeg een nieuwe zaak toe aan de lijst met actieve zaken.',
        type: 1, // Slash command type
        options: [
            {
                name: 'usertag',
                type: 3, // String
                description: 'De user tag (e.g., @username#1234)',
                required: true,
            },
        ],
    },
    options: {
        botDevelopers: true,
        cooldown: 5000, // 5-second cooldown
    },
    /**
     * @param {DiscordBot} client 
     * @param {ChatInputCommandInteraction} interaction 
     */
    run: async (client, interaction) => {
        try {
            await interaction.deferReply();

            const userTag = interaction.options.getString('usertag');

            // Validate user tag
            const userIdMatch = userTag.match(/^<@!?(\d+)>$/);
            if (!userIdMatch) {
                return interaction.followUp({
                    content: 'Deze gebruiker tag is onjuist. Gebruik de gebruiker ID (e.g., @username#1234) of de gebruiker mention (e.g., <@123456789012345678>).',
                    ephemeral: true,
                });
            }

            const taggedUserId = userIdMatch[1];
            const member = interaction.guild.members.cache.get(taggedUserId);
            if (!member) {
                return interaction.followUp({
                    content: 'Kan deze gebruiker niet vinden.',
                    ephemeral: true,
                });
            }

            const nickname = member.nickname || member.user.username;
            const currentChannelName = interaction.channel.name;

            // Format channel name
            const formattedChannelName = currentChannelName
                .replace(/[^\w\s-]/g, '') // Remove non-alphanumeric characters
                .replace(/-/g, ' ')        // Replace dashes with spaces
                .replace(/\b\w/g, (char) => char.toUpperCase()); // Capitalize words

            // Find the case log channel
            const logChannel = interaction.guild.channels.cache.find(
                (channel) => channel.id === config.Levisconfig.channelIDs.caseLog && channel.type === 0
            );

            if (!logChannel) {
                return interaction.followUp({
                    content: 'Er is geen log channel gevonden, voeg een channelID toe in de config.js bestand.',
                    ephemeral: true,
                });
            }

            // Fetch the latest embed message
            let embedMessage;
            const fetchMessages = await logChannel.messages.fetch({ limit: 10 });
            embedMessage = fetchMessages.find((msg) => msg.author.id === client.user.id && msg.embeds.length > 0);

            if (!embedMessage) {
                return interaction.followUp({
                    content: 'No active case embed found. Please create one first.',
                    ephemeral: true,
                });
            }

            // Prepare to update embed fields
            const embed = embedMessage.embeds[0];
            const fields = embed.fields || [];

            // Add the new case to the embed
            const userMention = `<@${member.id}>`; // Proper user mention for the value field
            const caseEntry = ` <#${interaction.channel.id}>`; // Channel link
            const existingField = fields.find((field) => field.name === nickname); // Group by nickname or tag
            
            if (existingField) {
                existingField.value += `\n${caseEntry}`; // Add the new case link to the existing field
            } else {
                fields.push({
                    name: nickname, // Use nickname as plain text
                    value: `${caseEntry}`, // Add the clickable channel link
                    inline: false,
                });
            }

            // Create the updated embed with the new fields
            const updatedEmbed = EmbedBuilder.from(embed).setFields(fields);

            // Update the embed in the log channel
            await embedMessage.edit({ embeds: [updatedEmbed] });

            await interaction.followUp({
                content: `Successfully added the case for ${nickname} to the active cases list in <#${interaction.channel.id}>.`,
                ephemeral: true,
            });

        } catch (err) {
            console.error('Error executing add-kees command:', err);
            interaction.followUp({
                content: 'An error occurred while executing this command.',
                ephemeral: true,
            });
        }
    },
}).toJSON();
